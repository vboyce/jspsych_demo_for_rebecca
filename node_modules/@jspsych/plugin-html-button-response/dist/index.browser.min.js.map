{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nconst info = <const>{\n  name: \"html-button-response\",\n  parameters: {\n    /** The HTML string to be displayed */\n    stimulus: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Stimulus\",\n      default: undefined,\n    },\n    /** Array containing the label(s) for the button(s). */\n    choices: {\n      type: ParameterType.STRING,\n      pretty_name: \"Choices\",\n      default: undefined,\n      array: true,\n    },\n    /** The HTML for creating button. Can create own style. Use the \"%choice%\" string to indicate where the label from the choices parameter should be inserted. */\n    button_html: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Button HTML\",\n      default: '<button class=\"jspsych-btn\">%choice%</button>',\n      array: true,\n    },\n    /** Any content here will be displayed under the button(s). */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Prompt\",\n      default: null,\n    },\n    /** How long to show the stimulus. */\n    stimulus_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Stimulus duration\",\n      default: null,\n    },\n    /** How long to show the trial. */\n    trial_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Trial duration\",\n      default: null,\n    },\n    /** The vertical margin of the button. */\n    margin_vertical: {\n      type: ParameterType.STRING,\n      pretty_name: \"Margin vertical\",\n      default: \"0px\",\n    },\n    /** The horizontal margin of the button. */\n    margin_horizontal: {\n      type: ParameterType.STRING,\n      pretty_name: \"Margin horizontal\",\n      default: \"8px\",\n    },\n    /** If true, then trial will end when user responds. */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Response ends trial\",\n      default: true,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * html-button-response\n * jsPsych plugin for displaying a stimulus and getting a button response\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/plugins/jspsych-html-button-response/ html-button-response plugin documentation on jspsych.org}\n */\nclass HtmlButtonResponsePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    // display stimulus\n    var html = '<div id=\"jspsych-html-button-response-stimulus\">' + trial.stimulus + \"</div>\";\n\n    //display buttons\n    var buttons = [];\n    if (Array.isArray(trial.button_html)) {\n      if (trial.button_html.length == trial.choices.length) {\n        buttons = trial.button_html;\n      } else {\n        console.error(\n          \"Error in html-button-response plugin. The length of the button_html array does not equal the length of the choices array\"\n        );\n      }\n    } else {\n      for (var i = 0; i < trial.choices.length; i++) {\n        buttons.push(trial.button_html);\n      }\n    }\n    html += '<div id=\"jspsych-html-button-response-btngroup\">';\n    for (var i = 0; i < trial.choices.length; i++) {\n      var str = buttons[i].replace(/%choice%/g, trial.choices[i]);\n      html +=\n        '<div class=\"jspsych-html-button-response-button\" style=\"display: inline-block; margin:' +\n        trial.margin_vertical +\n        \" \" +\n        trial.margin_horizontal +\n        '\" id=\"jspsych-html-button-response-button-' +\n        i +\n        '\" data-choice=\"' +\n        i +\n        '\">' +\n        str +\n        \"</div>\";\n    }\n    html += \"</div>\";\n\n    //show prompt if there is one\n    if (trial.prompt !== null) {\n      html += trial.prompt;\n    }\n    display_element.innerHTML = html;\n\n    // start time\n    var start_time = performance.now();\n\n    // add event listeners to buttons\n    for (var i = 0; i < trial.choices.length; i++) {\n      display_element\n        .querySelector(\"#jspsych-html-button-response-button-\" + i)\n        .addEventListener(\"click\", (e) => {\n          var btn_el = e.currentTarget as HTMLButtonElement;\n          var choice = btn_el.getAttribute(\"data-choice\"); // don't use dataset for jsdom compatibility\n          after_response(choice);\n        });\n    }\n\n    // store response\n    var response = {\n      rt: null,\n      button: null,\n    };\n\n    // function to end trial when it is time\n    const end_trial = () => {\n      // kill any remaining setTimeout handlers\n      this.jsPsych.pluginAPI.clearAllTimeouts();\n\n      // gather the data to store for the trial\n      var trial_data = {\n        rt: response.rt,\n        stimulus: trial.stimulus,\n        response: response.button,\n      };\n\n      // clear the display\n      display_element.innerHTML = \"\";\n\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    // function to handle responses by the subject\n    function after_response(choice) {\n      // measure rt\n      var end_time = performance.now();\n      var rt = Math.round(end_time - start_time);\n      response.button = parseInt(choice);\n      response.rt = rt;\n\n      // after a valid response, the stimulus will have the CSS class 'responded'\n      // which can be used to provide visual feedback that a response was recorded\n      display_element.querySelector(\"#jspsych-html-button-response-stimulus\").className +=\n        \" responded\";\n\n      // disable all the buttons after a response\n      var btns = document.querySelectorAll(\".jspsych-html-button-response-button button\");\n      for (var i = 0; i < btns.length; i++) {\n        //btns[i].removeEventListener('click');\n        btns[i].setAttribute(\"disabled\", \"disabled\");\n      }\n\n      if (trial.response_ends_trial) {\n        end_trial();\n      }\n    }\n\n    // hide image if timing is set\n    if (trial.stimulus_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        display_element.querySelector<HTMLElement>(\n          \"#jspsych-html-button-response-stimulus\"\n        ).style.visibility = \"hidden\";\n      }, trial.stimulus_duration);\n    }\n\n    // end trial if time limit is set\n    if (trial.trial_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(end_trial, trial.trial_duration);\n    }\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const default_data = {\n      stimulus: trial.stimulus,\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      response: this.jsPsych.randomization.randomInt(0, trial.choices.length - 1),\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    if (data.rt !== null) {\n      this.jsPsych.pluginAPI.clickTarget(\n        display_element.querySelector(`div[data-choice=\"${data.response}\"] button`),\n        data.rt\n      );\n    }\n  }\n}\n\nexport default HtmlButtonResponsePlugin;\n"],"names":["info","name","parameters","stimulus","type","ParameterType","HTML_STRING","pretty_name","default","undefined","choices","STRING","array","button_html","prompt","stimulus_duration","INT","trial_duration","margin_vertical","margin_horizontal","response_ends_trial","BOOL","HtmlButtonResponsePlugin","jsPsych","_classCallCheck","this","key","value","display_element","trial","_this","html","buttons","Array","isArray","length","console","error","i","push","str","replace","innerHTML","start_time","performance","now","querySelector","addEventListener","e","after_response","currentTarget","getAttribute","response","rt","button","end_trial","pluginAPI","clearAllTimeouts","trial_data","finishTrial","choice","end_time","Math","round","parseInt","className","btns","document","querySelectorAll","setAttribute","setTimeout","style","visibility","simulation_mode","simulation_options","load_callback","simulate_data_only","simulate_visual","default_data","randomization","sampleExGaussian","randomInt","data","mergeSimulationData","ensureSimulationDataConsistency","create_simulation_data","getDisplayElement","clickTarget","concat"],"mappings":"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"}