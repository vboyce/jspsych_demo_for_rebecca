{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nconst info = <const>{\n  name: \"survey-text\",\n  parameters: {\n    questions: {\n      type: ParameterType.COMPLEX,\n      array: true,\n      pretty_name: \"Questions\",\n      default: undefined,\n      nested: {\n        /** Question prompt. */\n        prompt: {\n          type: ParameterType.HTML_STRING,\n          pretty_name: \"Prompt\",\n          default: undefined,\n        },\n        /** Placeholder text in the response text box. */\n        placeholder: {\n          type: ParameterType.STRING,\n          pretty_name: \"Placeholder\",\n          default: \"\",\n        },\n        /** The number of rows for the response text box. */\n        rows: {\n          type: ParameterType.INT,\n          pretty_name: \"Rows\",\n          default: 1,\n        },\n        /** The number of columns for the response text box. */\n        columns: {\n          type: ParameterType.INT,\n          pretty_name: \"Columns\",\n          default: 40,\n        },\n        /** Whether or not a response to this question must be given in order to continue. */\n        required: {\n          type: ParameterType.BOOL,\n          pretty_name: \"Required\",\n          default: false,\n        },\n        /** Name of the question in the trial data. If no name is given, the questions are named Q0, Q1, etc. */\n        name: {\n          type: ParameterType.STRING,\n          pretty_name: \"Question Name\",\n          default: \"\",\n        },\n      },\n    },\n    /** If true, the order of the questions in the 'questions' array will be randomized. */\n    randomize_question_order: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Randomize Question Order\",\n      default: false,\n    },\n    /** HTML-formatted string to display at top of the page above all of the questions. */\n    preamble: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Preamble\",\n      default: null,\n    },\n    /** Label of the button to submit responses. */\n    button_label: {\n      type: ParameterType.STRING,\n      pretty_name: \"Button label\",\n      default: \"Continue\",\n    },\n    /** Setting this to true will enable browser auto-complete or auto-fill for the form. */\n    autocomplete: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Allow autocomplete\",\n      default: false,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * **survey-text**\n *\n * jsPsych plugin for free text response survey questions\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/plugins/jspsych-survey-text/ survey-text plugin documentation on jspsych.org}\n */\nclass SurveyTextPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    for (var i = 0; i < trial.questions.length; i++) {\n      if (typeof trial.questions[i].rows == \"undefined\") {\n        trial.questions[i].rows = 1;\n      }\n    }\n    for (var i = 0; i < trial.questions.length; i++) {\n      if (typeof trial.questions[i].columns == \"undefined\") {\n        trial.questions[i].columns = 40;\n      }\n    }\n    for (var i = 0; i < trial.questions.length; i++) {\n      if (typeof trial.questions[i].value == \"undefined\") {\n        trial.questions[i].value = \"\";\n      }\n    }\n\n    var html = \"\";\n    // show preamble text\n    if (trial.preamble !== null) {\n      html +=\n        '<div id=\"jspsych-survey-text-preamble\" class=\"jspsych-survey-text-preamble\">' +\n        trial.preamble +\n        \"</div>\";\n    }\n    // start form\n    if (trial.autocomplete) {\n      html += '<form id=\"jspsych-survey-text-form\">';\n    } else {\n      html += '<form id=\"jspsych-survey-text-form\" autocomplete=\"off\">';\n    }\n    // generate question order\n    var question_order = [];\n    for (var i = 0; i < trial.questions.length; i++) {\n      question_order.push(i);\n    }\n    if (trial.randomize_question_order) {\n      question_order = this.jsPsych.randomization.shuffle(question_order);\n    }\n\n    // add questions\n    for (var i = 0; i < trial.questions.length; i++) {\n      var question = trial.questions[question_order[i]];\n      var question_index = question_order[i];\n      html +=\n        '<div id=\"jspsych-survey-text-' +\n        question_index +\n        '\" class=\"jspsych-survey-text-question\" style=\"margin: 2em 0em;\">';\n      html += '<p class=\"jspsych-survey-text\">' + question.prompt + \"</p>\";\n      var autofocus = i == 0 ? \"autofocus\" : \"\";\n      var req = question.required ? \"required\" : \"\";\n      if (question.rows == 1) {\n        html +=\n          '<input type=\"text\" id=\"input-' +\n          question_index +\n          '\"  name=\"#jspsych-survey-text-response-' +\n          question_index +\n          '\" data-name=\"' +\n          question.name +\n          '\" size=\"' +\n          question.columns +\n          '\" ' +\n          autofocus +\n          \" \" +\n          req +\n          ' placeholder=\"' +\n          question.placeholder +\n          '\"></input>';\n      } else {\n        html +=\n          '<textarea id=\"input-' +\n          question_index +\n          '\" name=\"#jspsych-survey-text-response-' +\n          question_index +\n          '\" data-name=\"' +\n          question.name +\n          '\" cols=\"' +\n          question.columns +\n          '\" rows=\"' +\n          question.rows +\n          '\" ' +\n          autofocus +\n          \" \" +\n          req +\n          ' placeholder=\"' +\n          question.placeholder +\n          '\"></textarea>';\n      }\n      html += \"</div>\";\n    }\n\n    // add submit button\n    html +=\n      '<input type=\"submit\" id=\"jspsych-survey-text-next\" class=\"jspsych-btn jspsych-survey-text\" value=\"' +\n      trial.button_label +\n      '\"></input>';\n\n    html += \"</form>\";\n    display_element.innerHTML = html;\n\n    // backup in case autofocus doesn't work\n    display_element.querySelector<HTMLInputElement>(\"#input-\" + question_order[0]).focus();\n\n    display_element.querySelector(\"#jspsych-survey-text-form\").addEventListener(\"submit\", (e) => {\n      e.preventDefault();\n      // measure response time\n      var endTime = performance.now();\n      var response_time = Math.round(endTime - startTime);\n\n      // create object to hold responses\n      var question_data = {};\n\n      for (var index = 0; index < trial.questions.length; index++) {\n        var id = \"Q\" + index;\n        var q_element = document\n          .querySelector(\"#jspsych-survey-text-\" + index)\n          .querySelector(\"textarea, input\") as HTMLInputElement;\n        var val = q_element.value;\n        var name = q_element.attributes[\"data-name\"].value;\n        if (name == \"\") {\n          name = id;\n        }\n        var obje = {};\n        obje[name] = val;\n        Object.assign(question_data, obje);\n      }\n      // save data\n      var trialdata = {\n        rt: response_time,\n        response: question_data,\n      };\n\n      display_element.innerHTML = \"\";\n\n      // next trial\n      this.jsPsych.finishTrial(trialdata);\n    });\n\n    var startTime = performance.now();\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const question_data = {};\n    let rt = 1000;\n\n    for (const q of trial.questions) {\n      const name = q.name ? q.name : `Q${trial.questions.indexOf(q)}`;\n      const ans_words =\n        q.rows == 1\n          ? this.jsPsych.randomization.sampleExponential(0.25)\n          : this.jsPsych.randomization.randomInt(1, 10) * q.rows;\n      question_data[name] = this.jsPsych.randomization.randomWords({\n        exactly: ans_words,\n        join: \" \",\n      });\n      rt += this.jsPsych.randomization.sampleExGaussian(2000, 400, 0.004, true);\n    }\n\n    const default_data = {\n      response: question_data,\n      rt: rt,\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    const answers = Object.entries(data.response).map((x) => {\n      return x[1] as string;\n    });\n    for (let i = 0; i < answers.length; i++) {\n      this.jsPsych.pluginAPI.fillTextInput(\n        display_element.querySelector(`#input-${i}`),\n        answers[i],\n        ((data.rt - 1000) / answers.length) * (i + 1)\n      );\n    }\n\n    this.jsPsych.pluginAPI.clickTarget(\n      display_element.querySelector(\"#jspsych-survey-text-next\"),\n      data.rt\n    );\n  }\n}\n\nexport default SurveyTextPlugin;\n"],"names":["info","name","parameters","questions","type","ParameterType","COMPLEX","array","pretty_name","default","undefined","nested","prompt","HTML_STRING","placeholder","STRING","rows","INT","columns","required","BOOL","randomize_question_order","preamble","button_label","autocomplete","SurveyTextPlugin","jsPsych","_classCallCheck","this","key","value","display_element","trial","_this","i","length","html","question_order","push","randomization","shuffle","question","question_index","autofocus","req","innerHTML","querySelector","focus","addEventListener","e","preventDefault","endTime","performance","now","response_time","Math","round","startTime","question_data","index","id","q_element","document","val","attributes","obje","Object","assign","trialdata","rt","response","finishTrial","simulation_mode","simulation_options","load_callback","simulate_data_only","simulate_visual","_step","_iterator","_createForOfIteratorHelper","s","n","done","q","concat","indexOf","ans_words","sampleExponential","randomInt","randomWords","exactly","join","sampleExGaussian","err","f","default_data","data","pluginAPI","mergeSimulationData","ensureSimulationDataConsistency","create_simulation_data","getDisplayElement","answers","entries","map","x","fillTextInput","clickTarget"],"mappings":"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"}