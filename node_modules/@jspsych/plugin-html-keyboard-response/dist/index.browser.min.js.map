{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nconst info = <const>{\n  name: \"html-keyboard-response\",\n  parameters: {\n    /**\n     * The HTML string to be displayed.\n     */\n    stimulus: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Stimulus\",\n      default: undefined,\n    },\n    /**\n     * Array containing the key(s) the subject is allowed to press to respond to the stimulus.\n     */\n    choices: {\n      type: ParameterType.KEYS,\n      pretty_name: \"Choices\",\n      default: \"ALL_KEYS\",\n    },\n    /**\n     * Any content here will be displayed below the stimulus.\n     */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Prompt\",\n      default: null,\n    },\n    /**\n     * How long to show the stimulus.\n     */\n    stimulus_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Stimulus duration\",\n      default: null,\n    },\n    /**\n     * How long to show trial before it ends.\n     */\n    trial_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Trial duration\",\n      default: null,\n    },\n    /**\n     * If true, trial will end when subject makes a response.\n     */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Response ends trial\",\n      default: true,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * **html-keyboard-response**\n *\n * jsPsych plugin for displaying a stimulus and getting a keyboard response\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/plugins/jspsych-html-keyboard-response/ html-keyboard-response plugin documentation on jspsych.org}\n */\nclass HtmlKeyboardResponsePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    var new_html = '<div id=\"jspsych-html-keyboard-response-stimulus\">' + trial.stimulus + \"</div>\";\n\n    // add prompt\n    if (trial.prompt !== null) {\n      new_html += trial.prompt;\n    }\n\n    // draw\n    display_element.innerHTML = new_html;\n\n    // store response\n    var response = {\n      rt: null,\n      key: null,\n    };\n\n    // function to end trial when it is time\n    const end_trial = () => {\n      // kill any remaining setTimeout handlers\n      this.jsPsych.pluginAPI.clearAllTimeouts();\n\n      // kill keyboard listeners\n      if (typeof keyboardListener !== \"undefined\") {\n        this.jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\n      }\n\n      // gather the data to store for the trial\n      var trial_data = {\n        rt: response.rt,\n        stimulus: trial.stimulus,\n        response: response.key,\n      };\n\n      // clear the display\n      display_element.innerHTML = \"\";\n\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    // function to handle responses by the subject\n    var after_response = (info) => {\n      // after a valid response, the stimulus will have the CSS class 'responded'\n      // which can be used to provide visual feedback that a response was recorded\n      display_element.querySelector(\"#jspsych-html-keyboard-response-stimulus\").className +=\n        \" responded\";\n\n      // only record the first response\n      if (response.key == null) {\n        response = info;\n      }\n\n      if (trial.response_ends_trial) {\n        end_trial();\n      }\n    };\n\n    // start the response listener\n    if (trial.choices != \"NO_KEYS\") {\n      var keyboardListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n        callback_function: after_response,\n        valid_responses: trial.choices,\n        rt_method: \"performance\",\n        persist: false,\n        allow_held_key: false,\n      });\n    }\n\n    // hide stimulus if stimulus_duration is set\n    if (trial.stimulus_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        display_element.querySelector<HTMLElement>(\n          \"#jspsych-html-keyboard-response-stimulus\"\n        ).style.visibility = \"hidden\";\n      }, trial.stimulus_duration);\n    }\n\n    // end trial if trial_duration is set\n    if (trial.trial_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(end_trial, trial.trial_duration);\n    }\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const default_data = {\n      stimulus: trial.stimulus,\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      response: this.jsPsych.pluginAPI.getValidKey(trial.choices),\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    if (data.rt !== null) {\n      this.jsPsych.pluginAPI.pressKey(data.response, data.rt);\n    }\n  }\n}\n\nexport default HtmlKeyboardResponsePlugin;\n"],"names":["info","name","parameters","stimulus","type","ParameterType","HTML_STRING","pretty_name","default","undefined","choices","KEYS","prompt","stimulus_duration","INT","trial_duration","response_ends_trial","BOOL","HtmlKeyboardResponsePlugin","jsPsych","_classCallCheck","this","key","value","display_element","trial","_this","new_html","innerHTML","response","rt","end_trial","pluginAPI","clearAllTimeouts","keyboardListener","cancelKeyboardResponse","trial_data","finishTrial","getKeyboardResponse","callback_function","querySelector","className","valid_responses","rt_method","persist","allow_held_key","setTimeout","style","visibility","simulation_mode","simulation_options","load_callback","simulate_data_only","simulate_visual","default_data","randomization","sampleExGaussian","getValidKey","data","mergeSimulationData","ensureSimulationDataConsistency","create_simulation_data","getDisplayElement","pressKey"],"mappings":"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"}